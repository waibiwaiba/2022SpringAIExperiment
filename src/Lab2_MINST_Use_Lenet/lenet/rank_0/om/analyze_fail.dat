# [No.1] construct_wrapper.3
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(372)/    def construct(self, *inputs):/
funcgraph fg_3(
        %para1 : Tensor(F32)[32, 1, 32, 32]    # inputs0
        , %para2 : Tensor(I32)[32]    # inputs1
        , %para3 : Ref[Tensor(F32)][6, 1, 5, 5]    # conv1.weight
        , %para4 : Ref[Tensor(F32)][16, 6, 5, 5]    # conv2.weight
        , %para5 : Ref[Tensor(F32)][120, 400]    # fc1.weight
        , %para6 : Ref[Tensor(F32)][120]    # fc1.bias
        , %para7 : Ref[Tensor(F32)][84, 120]    # fc2.weight
        , %para8 : Ref[Tensor(F32)][84]    # fc2.bias
        , %para9 : Ref[Tensor(F32)][10, 84]    # fc3.weight
        , %para10 : Ref[Tensor(F32)][10]    # fc3.bias
        , %para11 : Ref[Tensor(F32)][6, 1, 5, 5]    # moments.conv1.weight
        , %para12 : Ref[Tensor(F32)][16, 6, 5, 5]    # moments.conv2.weight
        , %para13 : Ref[Tensor(F32)][120, 400]    # moments.fc1.weight
        , %para14 : Ref[Tensor(F32)][120]    # moments.fc1.bias
        , %para15 : Ref[Tensor(F32)][84, 120]    # moments.fc2.weight
        , %para16 : Ref[Tensor(F32)][84]    # moments.fc2.bias
        , %para17 : Ref[Tensor(F32)][10, 84]    # moments.fc3.weight
        , %para18 : Ref[Tensor(F32)][10]    # moments.fc3.bias
        , %para19 : Ref[Tensor(F32)][]    # momentum
        , %para20 : Ref[Tensor(F32)][]    # learning_rate
        , %para21 : Ref[Tensor(I32)][1]    # global_step
    ) {
    %1 : Tuple[Tensor(F32),Tensor(I32)] = Primitive::MakeTuple{prim_type=1}(%para1, %para2)    #(Tensor(F32)[32, 1, 32, 32], Tensor(I32)[32]) #scope: Default
#[CNode]15

#------------------------> 0
    %2 = UnpackCall::unpack_call(FuncGraph::fg_16, %1)    #(Func, Tuple[Tensor(F32),Tensor(I32)])    # fg_16=construct.16 #scope: Default
#[CNode]17
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(378)/        return loss/#[CNode]18
}
# order:
#   1: construct_wrapper.3:[CNode]17{[0]: ValueNode<UnpackCall> unpack_call.19, [1]: ValueNode<FuncGraph> construct.16, [2]: [CNode]15}
#   2: construct_wrapper.3:[CNode]18{[0]: ValueNode<Primitive> Return, [1]: [CNode]17}


# [No.2] UnpackCall.4

funcgraph fg_4(
        %para22 : Func    # 5
        , %para23 : Tuple[Tensor(F32),Tensor(I32)]    # 6
    ) {
    %1 : Tensor(F32)[32, 1, 32, 32] = Primitive::TupleGetItem{prim_type=1}(%para23, I64(0))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
#20
    %2 : Tensor(I32)[32] = Primitive::TupleGetItem{prim_type=1}(%para23, I64(1))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
#21

#------------------------> 1
    %3 = %para22(%1, %2)    #(Tensor(F32)[32, 1, 32, 32], Tensor(I32)[32]) #scope: Default
#22
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
#23
}
# order:
#   1: UnpackCall.4:22{[0]: 5, [1]: 20, [2]: 21}
#   2: UnpackCall.4:23{[0]: ValueNode<Primitive> Return, [1]: 22}


# [No.3] construct.7
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(372)/    def construct(self, *inputs):/
funcgraph fg_7[fg_3](
        %para24 : Tensor(F32)[32, 1, 32, 32]    # inputs0
        , %para25 : Tensor(I32)[32]    # inputs1
    ) {
    %1 : Tuple[Tensor(F32),Tensor(I32)] = Primitive::MakeTuple{prim_type=1}(%para24, %para25)    #(Tensor(F32)[32, 1, 32, 32], Tensor(I32)[32]) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(372)/    def construct(self, *inputs):/#[CNode]24

#------------------------> 2
    %2 = UnpackCall::unpack_call(FuncGraph::fg_11, %1)    #(Func, Tuple[Tensor(F32),Tensor(I32)])    # fg_11=construct.11 #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(373)/        loss = self.network(*inputs)/#loss
    %3 = Primitive::getattr{prim_type=1}(%2, "dtype")    #(Undefined, Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(374)/        sens = F.fill(loss.dtype, loss.shape, self.sens)/#[CNode]25
    %4 = Primitive::getattr{prim_type=1}(%2, "shape")    #(Undefined, Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(374)/        sens = F.fill(loss.dtype, loss.shape, self.sens)/#[CNode]26
    %5 = DoSignaturePrimitive::S-Prim-Fill{prim_type=1}(%3, %4, F32(1))    #(Undefined, Undefined, Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(374)/        sens = F.fill(loss.dtype, loss.shape, self.sens)/#sens
    %6 = DoSignaturePrimitive::S-Prim-MakeTuple{prim_type=1}(%5)    #(Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(375)/        grads = self.grad(self.network, self.weights)(*inputs, sens)/#[CNode]27
    %7 = UnpackGraphPrimitive::UnpackGraph{prim_type=1}(FuncGraph::fg_11, %1, %6)    #(Undefined, Tuple[Tensor(F32),Tensor(I32)], Undefined)    # fg_11=construct.11 #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(375)/        grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %8 = Primitive::MakeTuple{prim_type=1}(%para3, %para4, %para5, %para6, %para7, %para8, %para9, %para10)    #(Ref[Tensor(F32)][6, 1, 5, 5], Ref[Tensor(F32)][16, 6, 5, 5], Ref[Tensor(F32)][120, 400], Ref[Tensor(F32)][120], Ref[Tensor(F32)][84, 120], Ref[Tensor(F32)][84], Ref[Tensor(F32)][10, 84], Ref[Tensor(F32)][10]) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(375)/        grads = self.grad(self.network, self.weights)(*inputs, sens)/#[CNode]28
    %9 = DoSignaturePrimitive::S-Prim-grad{prim_type=1}(%7, %8)    #(Undefined, Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(375)/        grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %10 = UnpackCall::unpack_call(%9, %1, %6)    #(Undefined, Tuple[Tensor(F32),Tensor(I32)], Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(375)/        grads = self.grad(self.network, self.weights)(*inputs, sens)/#grads
    %11 = DoSignaturePrimitive::S-Prim-identity{prim_type=1}[side_effect_propagate=I64(1)](%10)    #(Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(376)/        grads = self.grad_reducer(grads)/#grads
    %12 = FuncGraph::fg_29(%11)    #(Undefined)    # fg_29=construct.29 #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(377)/        loss = F.depend(loss, self.optimizer(grads))/#[CNode]30
    %13 = DoSignaturePrimitive::S-Prim-Depend{prim_type=1}[side_effect_propagate=I64(1)](%2, %12)    #(Undefined, Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(377)/        loss = F.depend(loss, self.optimizer(grads))/#loss
    Primitive::Return{prim_type=1}(%13)    #(Undefined) #scope: Default
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(378)/        return loss/#[CNode]31
}
# order:
#   1: construct.7:loss{[0]: ValueNode<UnpackCall> unpack_call.32, [1]: ValueNode<FuncGraph> construct.11, [2]: [CNode]24}
#   2: construct.7:[CNode]25{[0]: ValueNode<Primitive> getattr, [1]: loss, [2]: ValueNode<StringImm> dtype}
#   3: construct.7:[CNode]26{[0]: ValueNode<Primitive> getattr, [1]: loss, [2]: ValueNode<StringImm> shape}
#   4: construct.7:sens{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Fill, [1]: [CNode]25, [2]: [CNode]26, [3]: ValueNode<FP32Imm> 1.000000}
#   5: construct.7:[CNode]27{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MakeTuple, [1]: sens}
#   6: construct.7:grads{[0]: ValueNode<UnpackGraphPrimitive> UnpackGraph, [1]: ValueNode<FuncGraph> construct.11, [2]: [CNode]24, [3]: [CNode]27}
#   7: construct.7:grads{[0]: ValueNode<DoSignaturePrimitive> S-Prim-grad, [1]: grads, [2]: [CNode]28}
#   8: construct.7:grads{[0]: ValueNode<UnpackCall> unpack_call.33, [1]: grads, [2]: [CNode]24, [3]: [CNode]27}
#   9: construct.7:grads{[0]: ValueNode<DoSignaturePrimitive> S-Prim-identity, [1]: grads}
#  10: construct.7:[CNode]30{[0]: ValueNode<FuncGraph> construct.29, [1]: grads}
#  11: construct.7:loss{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Depend, [1]: loss, [2]: [CNode]30}
#  12: construct.7:[CNode]31{[0]: ValueNode<Primitive> Return, [1]: loss}


# [No.4] UnpackCall.8

funcgraph fg_8(
        %para26 : Func    # 9
        , %para27 : Tuple[Tensor(F32),Tensor(I32)]    # 10
    ) {
    %1 : Tensor(F32)[32, 1, 32, 32] = Primitive::TupleGetItem{prim_type=1}(%para27, I64(0))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
#34
    %2 : Tensor(I32)[32] = Primitive::TupleGetItem{prim_type=1}(%para27, I64(1))    #(Tuple[Tensor(F32),Tensor(I32)], I64) #scope: Default
#35

#------------------------> 3
    %3 = %para26(%1, %2)    #(Tensor(F32)[32, 1, 32, 32], Tensor(I32)[32]) #scope: Default
#36
    Primitive::Return{prim_type=1}(%3)    #(Undefined) #scope: Default
#37
}
# order:
#   1: UnpackCall.8:36{[0]: 9, [1]: 34, [2]: 35}
#   2: UnpackCall.8:37{[0]: ValueNode<Primitive> Return, [1]: 36}


# [No.5] construct.11
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(110)/    def construct(self, data, label):/
funcgraph fg_11(
        %para28 : Tensor(F32)[32, 1, 32, 32]    # data
        , %para29 : Tensor(I32)[32]    # label
    ) {
    %1 : NoneType = FuncGraph::fg_38(%para28)    #(Tensor(F32)[32, 1, 32, 32])    # fg_38=construct.38 #scope: Default/network-WithLossCell
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(111)/        out = self._backbone(data)/#out

#------------------------> 4
    %2 = FuncGraph::fg_12(%1, %para29)    #(NoneType, Tensor(I32)[32])    # fg_12=construct.12 #scope: Default/network-WithLossCell
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(112)/        return self._loss_fn(out, label)/#[CNode]39
    Primitive::Return{prim_type=1}(%2)    #(Undefined) #scope: Default/network-WithLossCell
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(112)/        return self._loss_fn(out, label)/#[CNode]40
}
# order:
#   1: construct.11:out{[0]: ValueNode<FuncGraph> construct.38, [1]: data}
#   2: construct.11:[CNode]39{[0]: ValueNode<FuncGraph> construct.12, [1]: out, [2]: label}
#   3: construct.11:[CNode]40{[0]: ValueNode<Primitive> Return, [1]: [CNode]39}


# [No.6] construct.12
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(633)/    def construct(self, logits, labels):/
funcgraph fg_12(
        %para30 : NoneType    # Φlogits
        , %para31 : Tensor(I32)[32]    # labels
    ) {
    %1 : NoneType = DoSignaturePrimitive::S-Prim-_check_is_tensor{prim_type=1}("logits", %para30, "SoftmaxCrossEntropyWithLogits")    #(String, NoneType, String) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(634)/        _check_is_tensor('logits', logits, self.cls_name)/#[CNode]41
    %2 : NoneType = DoSignaturePrimitive::S-Prim-_check_is_tensor{prim_type=1}("labels", %para31, "SoftmaxCrossEntropyWithLogits")    #(String, Tensor(I32)[32], String) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(635)/        _check_is_tensor('labels', labels, self.cls_name)/#[CNode]42
    %3 : Tuple[NoneType*2] = Primitive::MakeTuple{prim_type=1}(%1, %2)    #(NoneType, NoneType) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(112)/        return self._loss_fn(out, label)/#[CNode]43
    %4 : Tuple[NoneType*2] = Primitive::stop_gradient{prim_type=1}(%3)    #(Tuple[NoneType*2]) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(112)/        return self._loss_fn(out, label)/#[CNode]44
    %5 : Bool = FuncGraph::fg_45(Bool(1))    #(Bool)    # fg_45=bool_.45 #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(636)/        if self.sparse:/#[CNode]46
    %6 : Func = Primitive::Switch{prim_type=1}(%5, FuncGraph::fg_13, FuncGraph::fg_47)    #(Bool, Func, Func)    # fg_13=✓construct.13, fg_47=✗construct.47 #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(636)/        if self.sparse:/#[CNode]48

#------------------------> 5
    %7 = %6() #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(636)/        if self.sparse:/#[CNode]49
    %8 = Primitive::Depend{prim_type=1}[side_effect_propagate=I64(1)](%7, %4)    #(Undefined, Tuple[NoneType*2]) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\wrap\cell_wrapper.py(112)/        return self._loss_fn(out, label)/#[CNode]50
    Primitive::Return{prim_type=1}(%8)    #(Undefined) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(636)/        if self.sparse:/#[CNode]51
}
# order:
#   1: construct.12:[CNode]41{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_check_is_tensor, [1]: ValueNode<StringImm> logits, [2]: Φlogits, [3]: ValueNode<StringImm> SoftmaxCrossEntropyWithLogits}
#   2: construct.12:[CNode]42{[0]: ValueNode<DoSignaturePrimitive> S-Prim-_check_is_tensor, [1]: ValueNode<StringImm> labels, [2]: labels, [3]: ValueNode<StringImm> SoftmaxCrossEntropyWithLogits}
#   3: construct.12:[CNode]46{[0]: ValueNode<FuncGraph> bool_.45, [1]: ValueNode<BoolImm> true}
#   4: construct.12:[CNode]48{[0]: ValueNode<Primitive> Switch, [1]: [CNode]46, [2]: ValueNode<FuncGraph> ✓construct.13, [3]: ValueNode<FuncGraph> ✗construct.47}
#   5: construct.12:[CNode]49{[0]: [CNode]48}
#   6: construct.12:[CNode]51{[0]: ValueNode<Primitive> Return, [1]: [CNode]50}


# [No.7] ✓construct.13
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(636)/        if self.sparse:/
funcgraph fg_13[fg_12](
) {
    %1 : Bool = DoSignaturePrimitive::S-Prim-equal{prim_type=1}("mean", "mean")    #(String, String) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/#[CNode]52
    %2 : Bool = FuncGraph::fg_45(%1)    #(Bool)    # fg_45=bool_.45 #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/#[CNode]53
    %3 : Func = Primitive::Switch{prim_type=1}(%2, FuncGraph::fg_14, FuncGraph::fg_54)    #(Bool, Func, Func)    # fg_14=✓✓construct.14, fg_54=✗✓construct.54 #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/#[CNode]55

#------------------------> 6
    %4 = %3() #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/#[CNode]56
    Primitive::Return{prim_type=1}(%4)    #(Undefined) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/#[CNode]57
}
# order:
#   1: ✓construct.13:[CNode]52{[0]: ValueNode<DoSignaturePrimitive> S-Prim-equal, [1]: ValueNode<StringImm> mean, [2]: ValueNode<StringImm> mean}
#   2: ✓construct.13:[CNode]53{[0]: ValueNode<FuncGraph> bool_.45, [1]: [CNode]52}
#   3: ✓construct.13:[CNode]55{[0]: ValueNode<Primitive> Switch, [1]: [CNode]53, [2]: ValueNode<FuncGraph> ✓✓construct.14, [3]: ValueNode<FuncGraph> ✗✓construct.54}
#   4: ✓construct.13:[CNode]56{[0]: [CNode]55}
#   5: ✓construct.13:[CNode]57{[0]: ValueNode<Primitive> Return, [1]: [CNode]56}


# [No.8] ✓✓construct.14
# In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(637)/            if self.reduction == 'mean':/
funcgraph fg_14[fg_12](
) {

#------------------------> 7
    %1 = DoSignaturePrimitive::S-Prim-SparseSoftmaxCrossEntropyWithLogits{prim_type=1}[output_names=["output"], input_names=["features", "labels"], sens=F32(1), is_grad=Bool(0)](%para30, %para31)    #(NoneType, Tensor(I32)[32]) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(638)/                x = self.sparse_softmax_cross_entropy(logits, labels)/#x
    Primitive::Return{prim_type=1}(%1)    #(Undefined) #scope: Default/network-WithLossCell/_loss_fn-SoftmaxCrossEntropyWithLogits
      # In file D:\Python\anaconda3\envs\mindspore_py39\lib\site-packages\mindspore\nn\loss\loss.py(639)/                return x/#[CNode]58
}
# order:
#   1: ✓✓construct.14:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-SparseSoftmaxCrossEntropyWithLogits, [1]: Φlogits, [2]: labels}
#   2: ✓✓construct.14:[CNode]58{[0]: ValueNode<Primitive> Return, [1]: x}


#===============================================================================
# num of function graphs in stack: 8/9 (Ignored 1 internal frames).
